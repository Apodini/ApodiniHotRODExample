#
# This source file is part of the Apodini HotROD example open source project
#
# SPDX-FileCopyrightText: 2022 Paul Schmiedmayer and the project authors (see CONTRIBUTORS.md) <paul.schmiedmayer@tum.de>
#
# SPDX-License-Identifier: MIT
#

version: '3.9'

# Run the tracing backend and all services
services:
  ####
  # Services

  # The frontend Web Service
  frontend:
    container_name: "frontend"
    build:
      context: .
      args:
        service: frontend
    image: ghcr.io/apodini/hotrod-frontend:latest # Name for the built image
    environment:
      SERVICE_CUSTOMER: "http://customer:8081"
      SERVICE_DRIVER: "http://driver:8082"
      SERVICE_ROUTE: "http://route:8083"
      OTLP_HOST: "otel-collector"
    ports:
      - 80:8080 # Expose the web service on port 80 to the outside
    networks: [services, tracing]
    depends_on:
      - customer
      - driver
      - route
      - otel-collector

  # The customer Web Service
  customer:
    container_name: "customer"
    build:
      context: .
      args:
        service: customer
    image: ghcr.io/apodini/hotrod-customer:latest # Name for the built image
    environment:
      OTLP_HOST: "otel-collector"
    ports:
      - 8081:8081 # Expose the web service on port 8081 to the outside
    expose:
      - 8081 # Expose the web service internally
    networks: [services, tracing]
    depends_on:
      - otel-collector

  # The driver Web Service
  driver:
    container_name: "driver"
    build:
      context: .
      args:
        service: driver
    image: ghcr.io/apodini/hotrod-driver:latest # Name for the built image
    environment:
      OTLP_HOST: "otel-collector"
    ports:
      - 8082:8082 # Expose the web service on port 8082 to the outside
    expose:
      - 8082 # Expose the web service internally
    networks: [services, tracing]
    depends_on:
      - otel-collector

  # The route Web Service
  route:
    container_name: "route"
    build:
      context: .
      args:
        service: route
    image: ghcr.io/apodini/hotrod-route:latest # Name for the built image
    environment:
      OTLP_HOST: "otel-collector"
    ports:
      - 8083:8083 # Expose the web service on port 8083 to the outside
    expose:
      - 8083 # Expose the web service internally
    networks: [services, tracing]
    depends_on:
      - otel-collector

  ####
  # Tracing

  # OpenTelemetry collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/config.yml"]
    volumes:
      - ./collector-config.yml:/etc/config.yml
    ports:
      - 4317:4317
    networks: [tracing]
    depends_on: [jaeger]

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - 16686:16686
    networks: [tracing]

networks:
  services:
  tracing:
